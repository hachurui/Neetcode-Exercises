class DynamicArray {
public:
    int* data;
    int capacity;
    int size;
    DynamicArray(int ogCapacity) {
        capacity = ogCapacity;
        if(capacity <=0)
        {
            throw std::invalid_argument("Capcity must be greater than 0.");
        }
        else{
            data = new int[capacity];
            size = 0;
        }
    }

    int get(int i) {
        if(i < 0 || i >= size)
        {
            throw out_of_range("Index out of bounds.");
        }
        else
        {
            return data[i];
        }
    }

    void set(int i, int n) {
        if(i < 0 || i >= size)
        {
            throw out_of_range("Index out of bounds.");
        }
        else
        {
            data[i] = n;
        }
    }

    void pushback(int n) {
        if(size == capacity)
        {
            resize();
        }
        data[size] = n;
        size++;
    }

    int popback() {
        int intPlaceholder = data[size-1]; //could do "...= data[--size];"
        //logically dont HAVE to delete the value, so i wont (it would be data[size-1] = 0; (or data[size] if decremented earlier) i guess?)
        size--;
        return intPlaceholder;
    }

    void resize() {
        int* newArr = new int[capacity*2];
        for(int i = 0; i < capacity; i++)
        {
            newArr[i] = data[i];
        }
        delete[] data;
        data = newArr;
        capacity = capacity * 2;
    }

    int getSize() {
        return size;
    }

    int getCapacity() {
        return capacity;
    }
};
